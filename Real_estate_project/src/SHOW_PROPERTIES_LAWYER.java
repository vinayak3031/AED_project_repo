
import java.awt.Color;
import java.awt.Image;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Divya
 */
public class SHOW_PROPERTIES_LAWYER extends javax.swing.JFrame {

    /**
     * Creates new form SHOW_PROPERTIES_LAWYER
     */
    String property_image_path = "";
    int propertyId = 0;
    public SHOW_PROPERTIES_LAWYER() {
        initComponents();
        fillJtableWithPropertiesData();
        
        // change the jtable row height
        jTable_lawyer.setRowHeight(40);
        // change the jtable selection background
        jTable_lawyer.setSelectionBackground(new Color(27,150,77));
        // change the "ID" column width
        jTable_lawyer.getColumnModel().getColumn(0).setPreferredWidth(25);
        // change the "Type" column width
        jTable_lawyer.getColumnModel().getColumn(1).setPreferredWidth(45);
        // change the "Owner" column width
        jTable_lawyer.getColumnModel().getColumn(3).setPreferredWidth(45);
        // change the "Age" column width
        jTable_lawyer.getColumnModel().getColumn(8).setPreferredWidth(35);
    }
    
    public void fillJtableWithPropertiesData()
    {
        P_PROPERTY property = new P_PROPERTY();
        ArrayList<P_PROPERTY> propertyList = property.propertiesListLawyer();
        
        // the jtable columns 0      1      2            3       4        5           6          7        8      9        10       11        12        13
        String[] colNames = {"ID","Type","square_feet","Owner","Price","Address","Bedrooms","Bathrooms","Age","Balcony","Pool","Backyard","Garage","Description"};
        
        // the jtable row
        // ownersList.size() = the size of the arraylist
        // 6 = the number of columns
        Object[][] rows = new Object[propertyList.size()][14];
        
        // add data form the list to the rows
        for(int i = 0; i < propertyList.size(); i++)
        {
            rows[i][0] = propertyList.get(i).getId();
            rows[i][1] = propertyList.get(i).getType();
            rows[i][2] = propertyList.get(i).getSize();
            rows[i][3] = propertyList.get(i).getOwnerId();
            rows[i][4] = propertyList.get(i).getPrice();
            rows[i][5] = propertyList.get(i).getAddress();
            rows[i][6] = propertyList.get(i).getBedrooms();
            rows[i][7] = propertyList.get(i).getBathrooms();
            rows[i][8] = propertyList.get(i).getAge();
            
            if(propertyList.get(i).isBlacone()) rows[i][9] = "YES" ;
            else{rows[i][9] = "NO" ;}
            
            if(propertyList.get(i).isPool()) rows[i][10] = "YES" ;
            else{rows[i][10] = "NO" ;}
            
            if(propertyList.get(i).isBackyard()) rows[i][11] = "YES" ;
            else{rows[i][11] = "NO" ;}
            
            if(propertyList.get(i).isGarage()) rows[i][12] = "YES" ;
            else{rows[i][12] = "NO" ;}
            
            rows[i][13] = propertyList.get(i).getDescription();
        }
        
        DefaultTableModel model = new DefaultTableModel(rows, colNames);
        jTable_lawyer.setModel(model);
        
    }
    
    public ImageIcon resizeImage(String path, byte[] byteImage)
    {
        ImageIcon pic;
        if(byteImage != null) pic = new ImageIcon(byteImage);
        else pic = new ImageIcon(path);
        
        Image img = pic.getImage().getScaledInstance(jLabel_Image.getWidth(), jLabel_Image.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(img);
        return image;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_lawyer = new javax.swing.JTable();
        jButton_Show_Images = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel_Image = new javax.swing.JLabel();
        verifyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable_lawyer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable_lawyer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_lawyerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_lawyer);

        jButton_Show_Images.setBackground(new java.awt.Color(0, 153, 255));
        jButton_Show_Images.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton_Show_Images.setForeground(new java.awt.Color(255, 255, 255));
        jButton_Show_Images.setText("Show This Property Images");
        jButton_Show_Images.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Show_Images.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_Show_ImagesActionPerformed(evt);
            }
        });

        jList1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel_Image.setBackground(new java.awt.Color(255, 204, 204));
        jLabel_Image.setOpaque(true);

        verifyButton.setBackground(new java.awt.Color(0, 153, 255));
        verifyButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        verifyButton.setForeground(new java.awt.Color(255, 255, 255));
        verifyButton.setText("Verify");
        verifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton_Show_Images, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(verifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel_Image, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton_Show_Images, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel_Image, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(12, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(verifyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_Show_ImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_Show_ImagesActionPerformed

        try
        {
            // set the property id
            int rowIndex = jTable_lawyer.getSelectedRow();// selected jtable row index
            int id = Integer.valueOf(jTable_lawyer.getValueAt(rowIndex, 0).toString());// get the id from the jtable

            // first check if this property contains images
            // we will use the jlist to do that
            if(jList1.getModel().getSize() > 0)
            {
                // show the selected property images in a slider
                // and set the id to the slider form
                PROPERTY_IMAGES_SLIDER imagesSliderform = new PROPERTY_IMAGES_SLIDER(id);
                imagesSliderform.setVisible(true);
                imagesSliderform.pack();
                imagesSliderform.setLocationRelativeTo(null);
                imagesSliderform.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "This Property Doesn't Have Any Image To Show", "No Images Found", 2);
            }

        }

        catch(Exception ex)
        {

            JOptionPane.showMessageDialog(null, "Select The Property First", "Property Not Selected", 2);

        }

    }//GEN-LAST:event_jButton_Show_ImagesActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked

        // try and catch if the list is empty
        try
        {
            // display the selected image from the list to jlabel
            // we can use the hashmap if we want like in the "property window"
            // but here instead will creat a function to the image by id
            String selectedListItem = String.valueOf(jList1.getSelectedValue());
            Integer imageId = Integer.valueOf(selectedListItem);
            byte[] image = new P_PROPERTY().getImageById(imageId);
            jLabel_Image.setIcon(resizeImage("",image));
        }
        catch(Exception ex)
        {
            // nothing
            // or a new black hole
        }

    }//GEN-LAST:event_jList1MouseClicked

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

    }//GEN-LAST:event_jList1ValueChanged

    private void jTable_lawyerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_lawyerMouseClicked
        // TODO add your handling code here:
        int rowIndex = jTable_lawyer.getSelectedRow();
        propertyId = Integer.valueOf(jTable_lawyer.getValueAt(rowIndex, 0).toString());
        
        // display the selected property images list in the jlist
        
        fillTypeList();
    }//GEN-LAST:event_jTable_lawyerMouseClicked

    private void verifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyButtonActionPerformed
        // TODO add your handling code here:
        int rowIndex = jTable_lawyer.getSelectedRow();
        propertyId = Integer.valueOf(jTable_lawyer.getValueAt(rowIndex, 0).toString());
        P_PROPERTY property = new P_PROPERTY();
        
        if(property.verifyProperty(propertyId)) {
              JOptionPane.showMessageDialog(null, "Property Verified", "Approved", 1);
        } else{
                JOptionPane.showMessageDialog(null, "Error while Updating", "Error", 2);
        }
        fillJtableWithPropertiesData();
    }//GEN-LAST:event_verifyButtonActionPerformed

    public void fillTypeList()
    {
        HashMap<byte[], Integer> imagesListMap = new P_PROPERTY().propertyImagesList(propertyId);
        
        DefaultListModel listModel = new DefaultListModel();
        
        int i = 0;
        
        for(Integer id: imagesListMap.values())
        {
            listModel.add(i, id);
            i++;
        }
        
        jList1.setModel(listModel);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SHOW_PROPERTIES_LAWYER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SHOW_PROPERTIES_LAWYER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SHOW_PROPERTIES_LAWYER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SHOW_PROPERTIES_LAWYER.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SHOW_PROPERTIES_LAWYER().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Show_Images;
    private javax.swing.JLabel jLabel_Image;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable_lawyer;
    private javax.swing.JButton verifyButton;
    // End of variables declaration//GEN-END:variables
}
